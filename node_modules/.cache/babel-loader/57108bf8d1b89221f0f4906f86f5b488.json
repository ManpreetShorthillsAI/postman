{"ast":null,"code":"var _jsxFileName = \"/home/shtlp_0172/Desktop/postman/postman_project/src/components/playground/RawPayload.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-tomorrow';\nimport { Context } from '../../contexts/Store'; // import '/monokai';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RawPayload = () => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(Context);\n  const [dark, setDark] = useState(false);\n  const [input, setInput] = useState(state.formData.payload);\n  useEffect(() => {\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setDark(true);\n    }\n  }, []);\n\n  const handleChange = e => {\n    setInput(e);\n    dispatch({\n      type: 'SET_PAYLOAD',\n      payload: e\n    });\n  }; // const handlePaste = (e) => {\n  //   // handleChange(e);\n  //   setInput(e);\n  //   return;\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(AceEditor, {\n    mode: \"json\",\n    fontSize: 13,\n    theme: dark ? 'twilight' : 'tomorrow',\n    value: input,\n    onChange: handleChange // onPaste={handleChange}\n    ,\n    name: \"rawPayloadInput\",\n    width: \"100%\",\n    tabSize: 2,\n    editorProps: {\n      $blockScrolling: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RawPayload, \"ZSLqa7ASJWEb3M7JDdo5wT1Id+k=\");\n\n_c = RawPayload;\nexport default RawPayload;\n\nvar _c;\n\n$RefreshReg$(_c, \"RawPayload\");","map":{"version":3,"sources":["/home/shtlp_0172/Desktop/postman/postman_project/src/components/playground/RawPayload.js"],"names":["useContext","useEffect","useState","AceEditor","Context","RawPayload","state","dispatch","dark","setDark","input","setInput","formData","payload","window","matchMedia","matches","handleChange","e","type","$blockScrolling"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,qCAAP;AACA,OAAO,0CAAP;AACA,SAASC,OAAT,QAAwB,sBAAxB,C,CACA;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBP,UAAU,CAACI,OAAD,CAAtC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACI,KAAK,CAACM,QAAN,CAAeC,OAAhB,CAAlC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QACEa,MAAM,CAACC,UAAP,IACAD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAFpD,EAGE;AACAP,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMQ,YAAY,GAAIC,CAAD,IAAO;AAC1BP,IAAAA,QAAQ,CAACO,CAAD,CAAR;AACAX,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAE,aAAR;AAAuBN,MAAAA,OAAO,EAAEK;AAAhC,KAAD,CAAR;AACD,GAHD,CAduB,CAmBvB;AACA;AACA;AACA;AACA;;;AAEA,sBACE,QAAC,SAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAE,EAFZ;AAGE,IAAA,KAAK,EAAEV,IAAI,GAAG,UAAH,GAAgB,UAH7B;AAIE,IAAA,KAAK,EAAEE,KAJT;AAKE,IAAA,QAAQ,EAAEO,YALZ,CAME;AANF;AAOE,IAAA,IAAI,EAAC,iBAPP;AAQE,IAAA,KAAK,EAAC,MARR;AASE,IAAA,OAAO,EAAE,CATX;AAUE,IAAA,WAAW,EAAE;AACXG,MAAAA,eAAe,EAAE;AADN;AAVf;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAzCD;;GAAMf,U;;KAAAA,U;AA2CN,eAAeA,UAAf","sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-tomorrow';\nimport { Context } from '../../contexts/Store';\n// import '/monokai';\n\nconst RawPayload = () => {\n  const { state, dispatch } = useContext(Context);\n  const [dark, setDark] = useState(false);\n  const [input, setInput] = useState(state.formData.payload);\n\n  useEffect(() => {\n    if (\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches\n    ) {\n      setDark(true);\n    }\n  }, []);\n\n  const handleChange = (e) => {\n    setInput(e);\n    dispatch({ type: 'SET_PAYLOAD', payload: e });\n  };\n\n  // const handlePaste = (e) => {\n  //   // handleChange(e);\n  //   setInput(e);\n  //   return;\n  // };\n\n  return (\n    <AceEditor\n      mode=\"json\"\n      fontSize={13}\n      theme={dark ? 'twilight' : 'tomorrow'}\n      value={input}\n      onChange={handleChange}\n      // onPaste={handleChange}\n      name=\"rawPayloadInput\"\n      width=\"100%\"\n      tabSize={2}\n      editorProps={{\n        $blockScrolling: true,\n      }}\n    />\n  );\n};\n\nexport default RawPayload;\n"]},"metadata":{},"sourceType":"module"}